name: Preview (Backend)

on:
  pull_request:

jobs:
  backend:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: read

    # Use your custom runner image (built in tools/runner/Dockerfile)
    container:
      image: ghcr.io/${{ github.repository }}/snf-runner:latest
      # Default user is root in the image; we'll use appuser for npm steps

    env:
      RENDER_URL: https://sniffr-staging-pr-${{ github.event.number }}.onrender.com
      PRETTY_URL: https://pr-${{ github.event.number }}-stage.sniffrpack.com

    steps:
      - name: Sanity (whoami / id / mounts)
        run: |
          whoami && id
          ls -ld /__w /__w/_temp || true

      - name: Checkout
        uses: actions/checkout@v4

      # Make workspace writable by appuser inside the container
      - name: Fix permissions for workspace (safe paths only)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          chown -R appuser:appuser "$GITHUB_WORKSPACE"
          chown -R appuser:appuser /__w/_temp || true
          chown -R appuser:appuser /github/home || true

      - name: Install deps (as appuser)
        run: su -s /bin/bash appuser -c "npm ci || npm install --no-audit --no-fund"

      - name: Build (as appuser)
        run: su -s /bin/bash appuser -c "npm run build --if-present"

      - name: Smoke check /healthz (Render, patient)
        run: |
          echo "Probing $RENDER_URL/healthz ..."
          ok=""
          # Up to ~3 minutes (60 * 3s)
          for i in $(seq 1 60); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$RENDER_URL/healthz" || true)
            # Treat 200 as success. Treat 401/403/404/502 as warming up.
            if [ "$code" = "200" ]; then
              echo "Health OK (200)"; ok=1; break
            fi
            echo "Attempt $i: got $code; waiting..."
            sleep 3
          done
          if [ -z "$ok" ]; then
            echo "Health check did not return 200 within the window"; exit 1
          fi

      # Call your Cloudflare Worker to upsert the A record + Workers Route + KV mapping
      - name: Create/refresh Pretty URL in Cloudflare
        if: ${{ success() }}
        env:
          WORKER_ENDPOINT: ${{ secrets.CFW_WORKER_ENDPOINT }}   # e.g. https://<your-worker>.workers.dev
          HOOK_SECRET: ${{ secrets.CFW_WEBHOOK_SECRET }}        # must match WEBHOOK_SECRET in the Worker
        run: |
          if [ -z "$WORKER_ENDPOINT" ] || [ -z "$HOOK_SECRET" ]; then
            echo "Cloudflare Worker secrets not set; skipping pretty URL provisioning."
            exit 0
          fi
          echo "Calling Cloudflare Worker to upsert DNS + route for $PRETTY_URL ..."
          curl -fsS -X POST "$WORKER_ENDPOINT" \
            -H "x-hook-secret: $HOOK_SECRET" \
            -H "content-type: application/json" \
            --data @- <<'JSON'
          {
            "pr": ${{ github.event.number }},
            "previewUrl": "${{ env.RENDER_URL }}",
            "fqdn": "${{ env.PRETTY_URL }}",
            "repo": "${{ github.repository }}",
            "sha": "${{ github.sha }}"
          }
JSON
          echo "Worker invoked."

      - name: Comment Preview URLs
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ✅ API Preview (Render): ${{ env.RENDER_URL }}
            🔎 RapiDoc: ${{ env.RENDER_URL }}/rapi-doc/rapidoc.html
            🌐 Pretty URL (Cloudflare): ${{ env.PRETTY_URL }}
