name: Preview (Backend)

on:
  pull_request:

jobs:
  backend:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: read
      pull-requests: write

    container:
      image: ghcr.io/${{ github.repository }}/snf-runner:latest

    env:
      PR_NUMBER: ${{ github.event.number }}
      RENDER_URL: https://sniffr-staging-pr-${{ github.event.number }}.onrender.com
      PRETTY_DOMAIN: ${{ vars.PRETTY_DOMAIN }}   # must be set to previews.sniffrpack.com
      API_DOCS_PATH: /rapi-doc/rapidoc.html


    steps:
      - name: Who am I
        run: |
          whoami && id
          ls -ld /__w /__w/_temp || true

      - name: Debug PRETTY_DOMAIN
        run: echo "PRETTY_DOMAIN=${PRETTY_DOMAIN:-<empty>}"
        
      - uses: actions/checkout@v4

      # SAFER: only chown the repo workspace
      - name: Fix workspace ownership for appuser
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          chown -R appuser:appuser "$GITHUB_WORKSPACE"

      - name: Install deps (as appuser)
        run: su -s /bin/bash appuser -c "npm ci || npm install --no-audit --no-fund"

      - name: Build (as appuser)
        run: su -s /bin/bash appuser -c "npm run build --if-present"

      - name: Wait for Render preview to come up
        run: |
          URL="$RENDER_URL"
          echo "Polling $URL/healthz ..."
          for i in {1..40}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/healthz" || true)
            if [ "$code" = "200" ]; then
              echo "Health OK"
              echo "RENDER_OK=1" >> $GITHUB_ENV
              break
            fi
            sleep 5
          done
          if [ "${RENDER_OK:-}" != "1" ]; then
            echo "Health not green yet; continuingâ€¦"
          fi

      # >>> Notify worker (bash so pipefail is allowed)
      - name: Notify preview alias worker
        shell: bash
        env:
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}   # set in repo Secrets
          PR_NUMBER: ${{ github.event.number }}
          RENDER_URL: ${{ env.RENDER_URL }}
        run: |
          set -euo pipefail
          if [[ -z "${WEBHOOK_SECRET:-}" ]]; then
            echo "WEBHOOK_SECRET not set; skipping."
            exit 0
          fi
          curl -sS -X POST "https://render-pr-alias.joemerrillis.workers.dev/_control" \
            -H "x-hook-secret: ${WEBHOOK_SECRET}" \
            -H "content-type: application/json" \
            --data @- <<JSON
          {
            "action": "upsert",
            "pr": ${{ env.PR_NUMBER }},
            "web": "${{ env.RENDER_URL }}"
          }
          JSON

      - name: Compose preview links
        id: compose
        run: |
          RENDER_MSG="âœ… API Preview (Render): $RENDER_URL"

          if [ -n "$PRETTY_DOMAIN" ]; then
            PRETTY_BASE="https://pr-${PR_NUMBER}-stage.${PRETTY_DOMAIN}"
            PRETTY_URL="${PRETTY_BASE}"
            PRETTY_DOCS_URL="${PRETTY_BASE}${API_DOCS_PATH}"

            PRETTY_MSG="âœ¨ Pretty URL: ${PRETTY_URL}"
            DOCS_MSG="ðŸ“š API Docs: ${PRETTY_DOCS_URL}"
          else
            PRETTY_MSG=""
            DOCS_MSG=""
          fi

          echo "render=$RENDER_MSG"       >> $GITHUB_OUTPUT
          echo "pretty=$PRETTY_MSG"       >> $GITHUB_OUTPUT
          echo "docs=$DOCS_MSG"           >> $GITHUB_OUTPUT


      - name: Comment Preview URLs
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ${{ steps.compose.outputs.render }}
            ${{ steps.compose.outputs.pretty }}
            ${{ steps.compose.outputs.docs }}
