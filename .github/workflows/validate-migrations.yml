name: Validate DB Migrations (CI)

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: app
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20
    steps:
      - uses: actions/checkout@v4

      - name: List migration files in this PR
        id: files
        run: |
          base="${{ github.event.pull_request.base.ref }}"
          git fetch origin "$base":"origin/$base"
          CHANGED=$(git diff --name-only "origin/$base"...HEAD | grep '^supabase/migrations/.*\.sql$' || true)
          printf 'changed<<EOF\n%s\nEOF\n' "$CHANGED" >> $GITHUB_OUTPUT

      - name: Fail on dangerous statements without label
        if: steps.files.outputs.changed != ''
        run: |
          DANG=$(echo "${{ steps.files.outputs.changed }}" | xargs -r cat | grep -Ei 'DROP\s+(TABLE|COLUMN)|ALTER\s+TABLE.+DROP' || true)
          echo "${{ toJson(github.event.pull_request.labels.*.name) }}" | grep -q 'breaking-change' && ALLOW=1 || ALLOW=0
          if [ -n "$DANG" ] && [ "$ALLOW" -ne 1 ]; then
            echo "❌ Detected DROP statements; add label 'breaking-change' to allow." >&2
            exit 1
          fi

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres && break
            sleep 1
          done

      - name: Apply migrations into scratch DB
        if: steps.files.outputs.changed != ''
        env:
          PGPASSWORD: postgres
        run: |
          set -euo pipefail
          uri="postgresql://postgres:postgres@127.0.0.1:5432/app"
          files=$(echo "${{ steps.files.outputs.changed }}" | tr ' ' '\n' | sort)
          for f in $files; do
            echo "Applying $f"
            psql "$uri" -v ON_ERROR_STOP=1 -f "$f"
          done
          pg_dump -s "$uri" > schema_after.sql

      - name: Comment results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const files = `${{ steps.files.outputs.changed }}`.trim() || "(none)";
            const body = `**Migration validation**
Files:
\`\`\`
${files}
\`\`\`
`;
            await github.rest.issues.createComment({ ...context.repo, issue_number: context.issue.number, body });

      - name: Upload schema snapshot
        if: steps.files.outputs.changed != ''
        uses: actions/upload-artifact@v4
        with:
          name: schema-snapshots
          path: schema_after.sql
