name: ChatGPT Agent

on:
  issues:
    types: [opened, edited, reopened]
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  agent:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure git user for CI
        run: |
          git config user.name "sniffr-agent"
          git config user.email "bot@sniffr.dev"

      - name: Determine request text + command
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          # raw body depending on event
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            BODY="${{ github.event.issue.body }}"
          else
            BODY="${{ github.event.comment.body }}"
          fi

          # Extract /agent <cmd> (plan|apply|revise)
          # case-insensitive
          CMD=$(echo "$BODY" | grep -Eio '^/agent[[:space:]]+(plan|apply|revise)' | awk '{print tolower($2)}' || true)
          echo "command=${CMD}" >> "$GITHUB_OUTPUT"

          # freeform request text (strip the leading '/agent <cmd>' if present)
          MSG=$(echo "$BODY" | sed -E 's#^/agent[[:space:]]+(plan|apply|revise)[[:space:]]*##I')
          # also include title to give more context for 'plan'
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            MSG="$(printf "%s — %s" "${{ github.event.issue.title }}" "$MSG")"
          fi

          # multiline-safe output for text
          {
            echo "text<<EOF"
            echo "$MSG"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install agent deps in scratch dir
        run: |
          set -euo pipefail
          mkdir -p .agent_runtime
          cd .agent_runtime
          npm init -y >/dev/null 2>&1
          # keep deps tiny; used only to run the agent file
          npm i openai@^4 @octokit/rest@^20

      - name: Run planner/apply
        id: run
        if: ${{ steps.detect.outputs.command != '' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          MODE: ${{ steps.detect.outputs.command }}   # plan | apply | revise
          REQUEST_TEXT: ${{ steps.detect.outputs.text }}
        run: |
          set -euo pipefail
          # Execute the repo's agent script; it will read MODE and REQUEST_TEXT
          node .github/agent/agent.mjs
        # Collect optional outputs the agent writes
      - name: Post plan (if any)
        if: ${{ steps.detect.outputs.command == 'plan' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.github/agent/.plan.md';
            if (fs.existsSync(path)) {
              const body = fs.readFileSync(path, 'utf8');
              const issue_number = context.payload.issue?.number || context.payload.comment?.issue_url.split('/').pop();
              await github.rest.issues.createComment({ ...context.repo, issue_number, body });
            }

      - name: Post PR link (if any)
        if: ${{ steps.detect.outputs.command == 'apply' }}
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const fs = require('fs');
            const outFile = process.env.GITHUB_OUTPUT;
            // Our agent writes pr_url to GITHUB_OUTPUT; read it back from env file
            let prUrl = '';
            if (outFile && fs.existsSync(outFile)) {
              prUrl = fs.readFileSync(outFile, 'utf8').split('\n').find(l => l.startsWith('pr_url='))?.slice(7) || '';
            }
            const issue_number = context.payload.issue?.number || context.payload.comment?.issue_url.split('/').pop();
            const msg = prUrl ? `✅ Agent opened draft PR: ${prUrl}` : `ℹ️ Agent finished 'apply' but no PR URL was emitted. Check logs.`;
            await github.rest.issues.createComment({ ...context.repo, issue_number, body: msg });

      - name: No-op note when no command
        if: ${{ steps.detect.outputs.command == '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue?.number || context.payload.comment?.issue_url.split('/').pop();
            const msg = "No agent command found. Comment with `/agent plan ...`, `/agent revise ...`, or `/agent apply ...`.";
            await github.rest.issues.createComment({ ...context.repo, issue_number, body: msg });
