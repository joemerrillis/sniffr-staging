name: agent

on:
  issues:
    types: [opened, edited, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      title:
        description: "Issue title (optional when dispatching)"
        required: false
        default: ""
      body:
        description: "Issue body (optional when dispatching)"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  AGENT_MODEL: gpt-5

jobs:
  agent:
    # Only run when:
    # - manually dispatched, OR
    # - an Issue is opened/edited/reopened (body contains '/agent'), OR
    # - a comment starting with '/agent ' is posted on an Issue/PR
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' &&
        (contains(github.event.issue.body, '/agent ') || contains(github.event.issue.body, '/Agent '))) ||
      (github.event_name == 'issue_comment' &&
        (startsWith(github.event.comment.body, '/agent ') || startsWith(github.event.comment.body, '/Agent ')))
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      # Gather TITLE/BODY into outputs and compute CMD/text safely (no shell expansion)
      - name: Parse event/title/body into request text
        id: parse
        shell: bash
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY:  ${{ github.event.issue.body }}
          INPUT_TITLE: ${{ github.event.inputs.title }}
          INPUT_BODY:  ${{ github.event.inputs.body }}
        run: |
          set -euo pipefail

          # Use issue title/body when event is "issues" or "issue_comment"; otherwise use workflow_dispatch inputs.
          if [[ "${GITHUB_EVENT_NAME}" == "issues" || "${GITHUB_EVENT_NAME}" == "issue_comment" ]]; then
            TITLE="${ISSUE_TITLE:-}"
            BODY="${ISSUE_BODY:-}"
            # For comments, use the comment text as the BODY instead
            if [[ "${GITHUB_EVENT_NAME}" == "issue_comment" ]]; then
              BODY="${{ github.event.comment.body }}"
            fi
          else
            TITLE="${INPUT_TITLE:-}"
            BODY="${INPUT_BODY:-}"
          fi

          # Fallback BODY (rare)
          if [[ -z "${BODY}" ]]; then
            read -r -d '' BODY <<'EOF'
          /agent plan

          # Feature
          Example body to avoid shell expansion.
          EOF
          fi

          # Extract "/agent <cmd>" at the top, default to "plan"
          CMD=""
          if [[ "${BODY}" =~ ^/[Aa]gent[[:space:]]+([A-Za-z]+) ]]; then
            CMD="${BASH_REMATCH[1],,}"
          fi
          if [[ -z "${CMD}" ]]; then CMD="plan"; fi

          # Message for the agent = body without the "/agent <cmd>" prefix
          AFTER="$(printf '%s' "${BODY}" | sed -E 's#^/[Aa]gent[[:space:]]+[A-Za-z]+[[:space:]]*##')"
          if [[ -z "${AFTER}" ]]; then
            MSG="${TITLE} — ${BODY}"
          else
            MSG="${AFTER}"
          fi

          {
            echo "cmd=${CMD}"
            printf 'text<<EOF
%s
EOF
' "${MSG}"
          } >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        run: npm ci || npm install

      # === Hybrid search context pre-step (index → serve → fetch) ===
      - name: Build code index (with embeddings if key present)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: npx tsx tools/build-index.ts

      - name: Start search server (background)
        run: npx tsx tools/search-server.ts & echo $! > search.pid

      - name: Fetch harvested context for this request
        env:
          REQUEST_TEXT: ${{ steps.parse.outputs.text }}
        run: node tools/fetch-context.mjs

      - name: Run agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN:       ${{ secrets.GITHUB_TOKEN }}
          MODE:           ${{ steps.parse.outputs.cmd }}
          REQUEST_TEXT:   ${{ steps.parse.outputs.text }}
          AGENT_MODEL:    ${{ env.AGENT_MODEL }}
        run: |
          set -euo pipefail
          echo "MODE=$MODE"
          echo "Text length: $(printf '%s' "$REQUEST_TEXT" | wc -c)"
          node .github/agent/agent.mjs
