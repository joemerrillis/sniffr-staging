name: agent

on:
  issues:
    types: [opened, edited, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      title:
        description: "Issue title (optional when dispatching)"
        required: false
        default: ""
      body:
        description: "Issue body (optional when dispatching)"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  AGENT_MODEL: gpt-5

jobs:
  agent:
    # Run when:
    # - manually dispatched, OR
    # - an Issue body contains '/agent ' (opened/edited/reopened), OR
    # - a new comment starting with '/agent ' appears
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' &&
        (contains(github.event.issue.body, '/agent ') || contains(github.event.issue.body, '/Agent '))) ||
      (github.event_name == 'issue_comment' &&
        (startsWith(github.event.comment.body, '/agent ') || startsWith(github.event.comment.body, '/Agent ')))
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      # Parse title/body → MODE and REQUEST_TEXT
      - name: Parse event/title/body into request text
        id: parse
        shell: bash
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY:  ${{ github.event.issue.body }}
          INPUT_TITLE: ${{ github.event.inputs.title }}
          INPUT_BODY:  ${{ github.event.inputs.body }}
        run: |
          set -euo pipefail

          # Decide where to read text from
          if [[ "${GITHUB_EVENT_NAME}" == "issues" || "${GITHUB_EVENT_NAME}" == "issue_comment" ]]; then
            TITLE="${ISSUE_TITLE:-}"
            BODY="${ISSUE_BODY:-}"
            if [[ "${GITHUB_EVENT_NAME}" == "issue_comment" ]]; then
              BODY='${{ github.event.comment.body }}'
            fi
          else
            TITLE="${INPUT_TITLE:-}"
            BODY="${INPUT_BODY:-}"
          fi

          # Fallback body
          if [[ -z "${BODY}" ]]; then
            read -r -d '' BODY <<'EOF'
          /agent plan

          # Feature
          Example body to avoid shell expansion.
          EOF
          fi

          # Extract "/agent <cmd>" (default plan)
          CMD=""
          if [[ "${BODY}" =~ ^/[Aa]gent[[:space:]]+([A-Za-z]+) ]]; then
            CMD="${BASH_REMATCH[1],,}"
          fi
          [[ -z "$CMD" ]] && CMD="plan"

          # Strip the prefix from message passed to the agent
          AFTER="$(printf '%s' "${BODY}" | sed -E 's#^/[Aa]gent[[:space:]]+[A-Za-z]+[[:space:]]*##')"
          if [[ -z "${AFTER}" ]]; then
            MSG="${TITLE} — ${BODY}"
          else
            MSG="${AFTER}"
          fi

          {
            echo "cmd=${CMD}"
            echo 'text<<EOF'
            printf '%s\n' "${MSG}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        run: npm ci || npm install

      # === Hybrid search context: build → serve → fetch ===
      - name: Build code index (embeddings if key present)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: npx tsx tools/build-index.ts

      - name: Install ripgrep (optional)
        run: sudo apt-get update && sudo apt-get install -y ripgrep

      - name: Start search server (background)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: npx tsx tools/search-server.ts & echo $! > search.pid

      - name: Fetch harvested context for this request
        env:
          REQUEST_TEXT: ${{ steps.parse.outputs.text }}
        run: node tools/fetch-context.mjs

      - name: Show harvested context size
        run: |
          sudo apt-get update >/dev/null && sudo apt-get install -y jq >/dev/null
          echo "hits: $(jq '.hits | length' .github/agent/.context.json)"

      - name: Run agent (and persist output)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN:       ${{ secrets.GITHUB_TOKEN }}
          MODE:           ${{ steps.parse.outputs.cmd }}
          REQUEST_TEXT:   ${{ steps.parse.outputs.text }}
          AGENT_MODEL:    ${{ env.AGENT_MODEL }}
        run: |
          set -euo pipefail
          mkdir -p .github/agent
          echo "MODE=$MODE"
          echo "Text length: $(printf '%s' "$REQUEST_TEXT" | wc -c)"

        if [[ "$MODE" = "plan" ]]; then
          printf '%s' "$REQUEST_TEXT" \
            | node .github/agent/agent.mjs --mode=plan \
            | tee .github/agent/.plan.md
        else
          printf '%s' "$REQUEST_TEXT" \
            | node .github/agent/agent.mjs --mode=apply \
            | tee .github/agent/.apply.json
        fi

      - name: Comment plan preview
        if: steps.parse.outputs.cmd == 'plan'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const p = '.github/agent/.plan.md';
            if (!fs.existsSync(p)) { core.info('No plan file at ' + p); return; }
            const md = fs.readFileSync(p, 'utf8');
            const short = md.replace(/\s+/g, ' ').trim().slice(0, 151);
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: ['**Agent plan (preview)**','', short + (md.length > 151 ? '…' : ''), '', '_Full plan attached as artifact `agent-plan`._'].join('\n')
            });

      - name: Upload full plan as artifact
        if: steps.parse.outputs.cmd == 'plan'
        uses: actions/upload-artifact@v4
        with:
          name: agent-plan
          path: .github/agent/.plan.md
          include-hidden-files: true
          if-no-files-found: warn

      - name: Upload full plan as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: agent-plan
          path: .github/agent/.plan.md
          include-hidden-files: true  
          if-no-files-found: warn
          
      - name: Link to this run (comment)
        if: always() && (github.event_name == 'issues' || github.event_name == 'issue_comment')
        uses: actions/github-script@v7
        with:
          script: |
            const url = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`;
            await github.rest.issues.createComment({ ...context.repo, issue_number: context.issue.number, body: `Artifact **agent-plan** is attached to this run.\n\n${url}` });

      - name: Materialize files from APPLY JSON
        if: steps.parse.outputs.cmd == 'apply'
        run: |
          set -euo pipefail
          node -e "const fs=require('fs'),p=require('path');const j=JSON.parse(fs.readFileSync('.github/agent/.apply.json','utf8'));if(!j.files||!j.files.length){process.exit(0)};for(const f of j.files){fs.mkdirSync(p.dirname(f.path),{recursive:true});fs.writeFileSync(f.path,f.contents,'utf8');}fs.writeFileSync('.github/agent/.commitmsg', (j.commitMessage||'chore: agent apply')+'\n');fs.writeFileSync('.github/agent/.summary', j.summary||'');"

      - name: Read APPLY metadata
        id: applymeta
        if: steps.parse.outputs.cmd == 'apply'
        run: |
          echo "commit<<EOF" >> $GITHUB_OUTPUT
          jq -r '.commitMessage // "chore: agent apply"' .github/agent/.apply.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          jq -r '.summary // ""' .github/agent/.apply.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request (agent apply)
        if: steps.parse.outputs.cmd == 'apply'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: agent/apply-${{ github.run_id }}
          title: ${{ steps.applymeta.outputs.commit }}
          commit-message: ${{ steps.applymeta.outputs.commit }}
          body: |
            ${{ steps.applymeta.outputs.summary }}

            _Auto-generated by **agent** from issue #${{ github.event.issue.number }}._
          labels: agent, automated-pr
          base: main
