name: ChatGPT Agent

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  agent:
    if: >
      (github.event_name == 'issues') ||
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/agent'))
    runs-on: ubuntu-latest

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure git user for CI
        run: |
          git config user.name  "sniffr-agent"
          git config user.email "bot@sniffr.dev"

      - name: Determine request text + command
        id: req
        shell: bash
        run: |
          set -euo pipefail
          # Gather title/body depending on event
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            TITLE="${{ github.event.issue.title }}"
            BODY="${{ github.event.issue.body }}"
          else
            TITLE=""
            BODY="${{ github.event.comment.body }}"
          fi

          # Extract /agent <cmd> (plan|revise|apply), case-insensitive
          CMD=""
          if [[ "$BODY" =~ ^/[Aa]gent[[:space:]]+([A-Za-z]+) ]]; then
            CMD="${BASH_REMATCH[1],,}"
          fi
          # Default to plan when no explicit subcommand
          if [[ -z "$CMD" ]]; then CMD="plan"; fi

          # Capture freeform text after "/agent <cmd>" (or use title + body)
          MSG="$(echo "$BODY" | sed -E 's#^/[Aa]gent[[:space:]]+[A-Za-z]+[[:space:]]*##')"
          if [[ -z "$MSG" ]]; then
            MSG="$TITLE ‚Äî $BODY"
          fi

          {
            echo "cmd=$CMD"
            printf 'text<<EOF\n%s\nEOF\n' "$MSG"
          } >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          # Avoid npm cache complaining when no lockfile is present
          cache: 'false'

      - name: Install agent deps in scratch dir
        run: |
          set -e
          mkdir -p .agent_runtime
          cd .agent_runtime
          npm init -y >/dev/null 2>&1
          npm i openai@^4 @octokit/rest@^20

      - name: Run planner/apply
        id: agent
        env:
          MODE: ${{ steps.req.outputs.cmd }}
          REQUEST_TEXT: ${{ steps.req.outputs.text }}
        run: |
          set -e
          node .github/agent/agent.mjs
        # agent.mjs will write pr_url/plan_path to $GITHUB_OUTPUT when relevant

      - name: Post plan (if any)
        if: steps.agent.outputs.plan_path != ''
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue?.number || context.payload.comment?.issue_url.split('/').pop();
            const path = "${{ steps.agent.outputs.plan_path }}";
            const fs = require('fs');
            const plan = fs.readFileSync(path, 'utf8');
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number,
              body: `### üìù Plan\n\n${plan}`
            });

      - name: Post PR link (if any)
        if: steps.agent.outputs.pr_url != ''
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue?.number || context.payload.comment?.issue_url.split('/').pop();
            const url = "${{ steps.agent.outputs.pr_url }}";
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number,
              body: `‚úÖ Draft PR opened: ${url}`
            });

      - name: No-op note when no command
        if: steps.req.outputs.cmd == ''
        run: echo "No /agent command detected; skipping."
