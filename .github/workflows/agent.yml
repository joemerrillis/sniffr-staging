name: Agent

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]
  # optional manual trigger while iterating:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  agent:
    # Only run when the issue body or a comment starts with "/agent "
    if: >
      (github.event_name == 'issues' && startsWith(github.event.issue.body, '/agent ')) ||
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/agent '))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Parse command and prompt (no bash)
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.github/.agent';
            fs.mkdirSync(path, { recursive: true });

            const isIssue = context.eventName === 'issues';
            const body = isIssue ? context.payload.issue.body : context.payload.comment.body;
            const m = body.match(/^\/agent\s+(plan|apply)\s*([\s\S]*)$/);
            if (!m) core.setFailed('No "/agent plan" or "/agent apply" prefix found.');
            const cmd = m[1];
            const text = (m[2] || '').replace(/^\s+/, ''); // trim leading whitespace

            core.setOutput('cmd', cmd);
            fs.writeFileSync(`${path}/request.md`, text, 'utf8');

      # ===================== PLAN =====================
      - name: Run agent PLAN (persists plan.md)
        if: steps.parse.outputs.cmd == 'plan'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          node .github/agent/plan-and-commit.mjs \
            --prompt-file .github/.agent/request.md \
            --planOnly

      - name: Comment plan preview on issue
        if: steps.parse.outputs.cmd == 'plan'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const p = '.github/.agent/plan.md';
            if (!fs.existsSync(p)) {
              core.setFailed('PLAN missing at .github/.agent/plan.md');
            } else {
              const txt = fs.readFileSync(p, 'utf8');
              const head = txt.replace(/\s+/g, ' ').slice(0, 300);
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: [
                  '**Agent PLAN (preview)**',
                  '',
                  head + (txt.length > 300 ? 'â€¦' : ''),
                  '',
                  '_Full plan attached as artifact:_ **agent-plan.md**'
                ].join('\n')
              });
            }

      - name: Upload plan artifact
        if: steps.parse.outputs.cmd == 'plan'
        uses: actions/upload-artifact@v4
        with:
          name: agent-plan.md
          path: .github/.agent/plan.md
          include-hidden-files: true
          if-no-files-found: error

      # ===================== APPLY =====================
      - name: Run agent APPLY (writes files & opens PR)
        if: steps.parse.outputs.cmd == 'apply'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN:    ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Your script should write files, create a branch, commit, and open a PR.
          node .github/agent/plan-and-commit.mjs \
            --prompt-file .github/.agent/request.md \
            --applyOnly

      - name: Attach latest APPLY JSON (if present)
        if: steps.parse.outputs.cmd == 'apply'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const dir = '.github/.agent';
            if (!fs.existsSync(dir)) return;
            const list = fs.readdirSync(dir)
              .filter(f => /^apply-.*\.json$/.test(f))
              .map(f => ({ f, t: fs.statSync(`${dir}/${f}`).mtimeMs }))
              .sort((a,b) => b.t - a.t);
            if (list.length) {
              core.setOutput('apply_json', `${dir}/${list[0].f}`);
            }
      - name: Upload APPLY JSON (artifact)
        if: steps.parse.outputs.cmd == 'apply' && steps.github_script.outputs.apply_json
        uses: actions/upload-artifact@v4
        with:
          name: agent-apply.json
          path: ${{ steps.github_script.outputs.apply_json }}
          include-hidden-files: true
          if-no-files-found: warn
