name: agent

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:
    inputs:
      title:
        description: "Issue title (optional when dispatching)"
        required: false
        default: ""
      body:
        description: "Issue body (optional when dispatching)"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  AGENT_MODEL: gpt-5

jobs:
  agent:
    runs-on: ubuntu-24.04

    steps:
      - name: starting
        run: echo "starting"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      # Gather TITLE/BODY into outputs and compute CMD/text safely (no shell expansion)
      - name: Parse event/title/body into request text
        id: parse
        shell: bash
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY:  ${{ github.event.issue.body }}
          INPUT_TITLE: ${{ github.event.inputs.title }}
          INPUT_BODY:  ${{ github.event.inputs.body }}
        run: |
          set -euo pipefail

          # Use issue title/body when event is "issues"; otherwise use workflow_dispatch inputs.
          if [[ "${GITHUB_EVENT_NAME}" == "issues" ]]; then
            TITLE="${ISSUE_TITLE:-}"
            BODY="${ISSUE_BODY:-}"
          else
            TITLE="${INPUT_TITLE:-}"
            BODY="${INPUT_BODY:-}"
          fi

          # If BODY is still empty (rare), provide a safe single-quoted heredoc fallback.
          if [[ -z "${BODY}" ]]; then
            read -r -d '' BODY <<'EOF'
          /agent plan

          # Feature
          Example body to avoid shell expansion of backticks like `walker_recommendations`.
          EOF
          fi

          # Extract "/agent <cmd>" at the top, default to "plan"
          CMD=""
          if [[ "${BODY}" =~ ^/[Aa]gent[[:space:]]+([A-Za-z]+) ]]; then
            CMD="${BASH_REMATCH[1],,}"
          fi
          if [[ -z "${CMD}" ]]; then CMD="plan"; fi

          # The message we pass to the agent is the body without the "/agent <cmd>" prefix
          AFTER="$(printf '%s' "${BODY}" | sed -E 's#^/[Aa]gent[[:space:]]+[A-Za-z]+[[:space:]]*##')"
          if [[ -z "${AFTER}" ]]; then
            MSG="${TITLE} — ${BODY}"
          else
            MSG="${AFTER}"
          fi

          {
            echo "cmd=${CMD}"
            printf 'text<<EOF\n%s\nEOF\n' "${MSG}"
          } >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        # If you don't keep a package-lock.json at the repo root, npm ci will fail; we fall back to npm install.
        run: npm ci || npm install

      - name: Run agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN:       ${{ secrets.GITHUB_TOKEN }}
          MODE:           ${{ steps.parse.outputs.cmd }}
          REQUEST_TEXT:   ${{ steps.parse.outputs.text }}
          AGENT_MODEL:    ${{ env.AGENT_MODEL }}
        run: |
          set -euo pipefail
          echo "MODE=$MODE"
          echo "Text length: $(printf '%s' "$REQUEST_TEXT" | wc -c)"
          # ✅ Correct path to your file:
          node .github/agent/agent.mjs

      - name: Post-run note
        run: |
          echo "Plan file (if generated): .github/agent/.plan.md"
          if [[ -f "$GITHUB_OUTPUT" ]]; then
            echo "GITHUB_OUTPUT exists."
          fi
