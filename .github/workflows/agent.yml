name: Agent

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  agent:
    if: >
      (github.event_name == 'issues' && startsWith(github.event.issue.body, '/agent ')) ||
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/agent '))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Parse command and prompt (no bash)
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            fs.mkdirSync('.github/.agent', { recursive: true });
            const isIssue = context.eventName === 'issues';
            const body = isIssue ? context.payload.issue.body : context.payload.comment.body;
            const m = body.match(/^\/agent\s+(plan|apply)\s*([\s\S]*)$/);
            if (!m) core.setFailed('No "/agent plan" or "/agent apply" prefix found.');
            const cmd = m[1];
            const text = (m[2] || '').replace(/^\s+/, '');
            core.setOutput('cmd', cmd);
            fs.writeFileSync('.github/.agent/request.md', text, 'utf8');

      # ===================== PLAN =====================
      - name: Run agent PLAN (persists plan.md)
        if: steps.parse.outputs.cmd == 'plan'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          node .github/agent/plan-and-commit.mjs \
            --prompt-file .github/.agent/request.md \
            --planOnly

      - name: Comment plan preview on issue
        if: steps.parse.outputs.cmd == 'plan'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const p = '.github/.agent/plan.md';
            if (!fs.existsSync(p)) { core.setFailed('PLAN missing at ' + p); }
            const txt = fs.readFileSync(p,'utf8');
            const head = txt.replace(/\s+/g,' ').slice(0, 300);
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: [
                '**Agent PLAN (preview)**',
                '',
                head + (txt.length > 300 ? 'â€¦' : ''),
                '',
                '_Full plan attached as artifact:_ **agent-plan.md**'
              ].join('\n')
            });

      - name: Upload plan artifact
        if: steps.parse.outputs.cmd == 'plan'
        uses: actions/upload-artifact@v4
        with:
          name: agent-plan.md
          path: .github/.agent/plan.md
          include-hidden-files: true
          if-no-files-found: error

      # ===================== APPLY =====================
      - name: Run agent APPLY (writes files)
        if: steps.parse.outputs.cmd == 'apply'
        id: applyrun
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN:    ${{ secrets.GITHUB_TOKEN }}
        run: |
          node .github/agent/plan-and-commit.mjs \
            --prompt-file .github/.agent/request.md \
            --applyOnly
          # Keep latest apply JSON (if any) for artifacts & commit message
          if ls .github/.agent/apply-*.json >/dev/null 2>&1; then
            echo "latest_apply=$(ls -t .github/.agent/apply-*.json | head -n 1)" >> "$GITHUB_OUTPUT"
          fi

      - name: Extract apply metadata
        if: steps.parse.outputs.cmd == 'apply' && steps.applyrun.outputs.latest_apply
        id: meta
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const p = process.env.LATEST = core.getInput('latest') || '${{ steps.applyrun.outputs.latest_apply }}';
            if (!p || !fs.existsSync(p)) { core.setOutput('commit_msg','chore: agent apply'); core.setOutput('summary',''); return; }
            const j = JSON.parse(fs.readFileSync(p,'utf8'));
            core.setOutput('commit_msg', j.commitMessage || 'chore: agent apply');
            core.setOutput('summary', j.summary || '');
        with:
          latest: ${{ steps.applyrun.outputs.latest_apply }}

      - name: Create branch, commit, and push
        if: steps.parse.outputs.cmd == 'apply'
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          BR="agent/apply-${GITHUB_RUN_ID}"
          git checkout -b "$BR"
          # Only commit if there are changes (no command substitution)
          if git status --porcelain | grep -q .; then
            git add -A
            git commit -m "${{ steps.meta.outputs.commit_msg || 'chore: agent apply' }}"
            git push --set-upstream origin "$BR"
          else
            echo "No file changes produced by APPLY; exiting early."
            exit 0
          fi

      - name: Open Pull Request
        if: steps.parse.outputs.cmd == 'apply'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `${{ toJSON(steps.meta.outputs.commit_msg || 'chore: agent apply') }}`;
            const body  = `${{ toJSON(steps.meta.outputs.summary || '') }}\n\n_Auto-generated by **agent** from issue #${{ github.event.issue.number }}._`;
            const head  = 'agent/apply-' + process.env.GITHUB_RUN_ID;
            try {
              const { data: pr } = await github.rest.pulls.create({ ...context.repo, title, body, head, base: 'main' });
              await github.rest.issues.createComment({ ...context.repo, issue_number: context.issue.number, body: `Opened PR #${pr.number}: ${pr.title}` });
            } catch (e) {
              core.setFailed(`Failed to open PR: ${e.message}`);
            }

      - name: Upload APPLY JSON (artifact)
        if: steps.parse.outputs.cmd == 'apply' && steps.applyrun.outputs.latest_apply
        uses: actions/upload-artifact@v4
        with:
          name: agent-apply.json
          path: ${{ steps.applyrun.outputs.latest_apply }}
          include-hidden-files: true
          if-no-files-found: warn
