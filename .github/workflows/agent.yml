name: ChatGPT Agent

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  agent:
    runs-on: ubuntu-latest

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AGENT_MODEL: gpt-5

    steps:
      - name: Set up job
        run: echo "starting"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure git user for CI
        run: |
          git config user.email "bot@sniffr.dev"
          git config user.name "sniffr-agent"

      - name: Determine request text + command
        id: req
        shell: bash
        run: |
          set -euo pipefail

          # Build TITLE/BODY from event
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            TITLE="${{ github.event.issue.title }}"
            BODY="${{ github.event.issue.body }}"
          else
            TITLE=""
            BODY="${{ github.event.comment.body }}"
          fi

          # Extract /agent <cmd>, default to 'plan'
          CMD=""
          if [[ "$BODY" =~ ^/[Aa]gent[[:space:]]+([A-Za-z]+) ]]; then
            CMD="${BASH_REMATCH[1],,}"
          fi
          if [[ -z "$CMD" ]]; then CMD="plan"; fi

          # Freeform text after the command (or fall back to title + body)
          AFTER="$(echo "$BODY" | sed -E 's#^/[Aa]gent[[:space:]]+[A-Za-z]+[[:space:]]*##')"
          if [[ -z "$AFTER" ]]; then
            MSG="$TITLE — $BODY"
          else
            MSG="$AFTER"
          fi

          {
            echo "cmd=$CMD"
            printf 'text<<EOF\n%s\nEOF\n' "$MSG"
          } >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install agent deps in scratch dir
        id: deps
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .agent_runtime
          cd .agent_runtime
          npm init -y >/dev/null 2>&1
          # Make installs as quiet as possible but DO NOT redirect to /dev/null
          npm i openai@^4 @octokit/rest@^20
          echo "NODE_PATH=$(pwd)/node_modules" >> "$GITHUB_ENV"

      - name: Run planner/apply
        if: startsWith(steps.req.outputs.cmd, 'plan') || startsWith(steps.req.outputs.cmd, 'revise') || startsWith(steps.req.outputs.cmd, 'apply')
        id: agent
        shell: bash
        env:
          MODE: ${{ steps.req.outputs.cmd }}
          REQUEST_TEXT: ${{ steps.req.outputs.text }}
        run: |
          set -euo pipefail
          export NODE_PATH="${NODE_PATH:-}:$NODE_PATH"
          node .github/agent/agent.mjs

      - name: Post plan (if any)
        if: steps.req.outputs.cmd == 'plan'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const p = ".github/agent/.plan.md";
            if (fs.existsSync(p)) {
              const body = fs.readFileSync(p, "utf8");
              const issue_number = context.payload.issue?.number || context.payload.comment?.issue_url.split('/').pop();
              await github.rest.issues.createComment({ ...context.repo, issue_number, body });
            }

      - name: Post PR link (if any)
        if: steps.agent.outputs.pr_url != ''
        uses: actions/github-script@v7
        with:
          script: |
            const url = "${{ steps.agent.outputs.pr_url }}";
            if (url) {
              const issue_number = context.payload.issue?.number || context.payload.comment?.issue_url.split('/').pop();
              await github.rest.issues.createComment({ ...context.repo, issue_number, body: `✅ Draft PR opened: ${url}` });
            }

      - name: No-op note when no command
        if: steps.req.outputs.cmd == '' || steps.req.outputs.cmd == 'noop'
        run: echo "No /agent command found."

