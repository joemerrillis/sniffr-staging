name: ChatGPT Agent

on:
  issues:
    types: [opened, edited, reopened]
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  agent:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure git user for CI
        run: |
          git config user.name  "sniffr-agent"
          git config user.email "bot@sniffr.dev"

      # Read the raw event JSON (not GitHub expressions) so the body
      # can never be executed as shell. Extract /agent <cmd> + message.
      - name: Determine request text + command
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          EVENT_JSON="$(cat "$GITHUB_EVENT_PATH")"

          if [[ "${{ github.event_name }}" == "issues" ]]; then
            TITLE="$(jq -r '.issue.title // ""'   <<<"$EVENT_JSON")"
            BODY="$(jq -r '.issue.body  // ""'   <<<"$EVENT_JSON")"
          else
            TITLE=""
            BODY="$(jq -r '.comment.body // ""' <<<"$EVENT_JSON")"
          fi

          # Find a leading `/agent <cmd>` on any line (plan|apply|revise|smoke)
          CMD="$(
            printf '%s\n' "$BODY" \
            | sed -nE 's@^/agent[[:space:]]+([a-z]+).*@\1@Ip' \
            | head -n1 | tr '[:upper:]' '[:lower:]'
          )"

          # If no /agent command, short-circuit; later steps will no-op.
          if [[ -z "${CMD:-}" ]]; then
            echo "command=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Freeform spec: same line after "/agent <cmd>".
          MSG="$(
            printf '%s\n' "$BODY" \
            | sed -nE 's@^/agent[[:space:]]+[a-z]+[[:space:]]*@@Ip' \
            | head -n1
          )"

          # If author put the spec on the next lines, include the title for context too.
          if [[ -z "$MSG" ]]; then
            MSG="$TITLE"$'\n'"$BODY"
          fi

          echo "command=$CMD" >> "$GITHUB_OUTPUT"
          {
            echo 'text<<EOF'
            printf '%s\n' "$MSG"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install agent deps in scratch dir
        run: |
          set -euo pipefail
          mkdir -p .agent_runtime
          cd .agent_runtime
          npm init -y >/dev/null 2>&1
          npm i openai@^4 @octokit/rest@^20 >/dev/null
          echo "NODE_PATH=$(pwd)/node_modules" >> "$GITHUB_ENV"

      - name: Run planner/apply
        id: run
        if: ${{ steps.detect.outputs.command != '' }}
        env:
          NODE_PATH: ${{ env.NODE_PATH }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN:        ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          MODE:            ${{ steps.detect.outputs.command }}   # plan | apply | revise | smoke (future)
          REQUEST_TEXT:    ${{ steps.detect.outputs.text }}
          AGENT_MODEL:     gpt-5
        run: |
          set -euo pipefail
          node .github/agent/agent.mjs

      - name: Post plan (if any)
        if: ${{ steps.detect.outputs.command == 'plan' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planPath = '.github/agent/.plan.md';
            const issue_number = context.payload.issue?.number
              ?? Number(context.payload.comment?.issue_url.split('/').pop());
            if (fs.existsSync(planPath)) {
              const body = fs.readFileSync(planPath, 'utf8');
              await github.rest.issues.createComment({ ...context.repo, issue_number, body });
            } else {
              await github.rest.issues.createComment({ ...context.repo, issue_number, body: "ℹ️ Planner ran but no plan was emitted." });
            }

      - name: Post PR link (if any)
        if: ${{ steps.detect.outputs.command == 'apply' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outFile = process.env.GITHUB_OUTPUT;
            const issue_number = context.payload.issue?.number
              ?? Number(context.payload.comment?.issue_url.split('/').pop());
            let prUrl = '';
            if (outFile && fs.existsSync(outFile)) {
              prUrl = fs.readFileSync(outFile, 'utf8')
                .split('\n')
                .find(l => l.startsWith('pr_url='))?.slice(7) || '';
            }
            const msg = prUrl
              ? `✅ Agent opened draft PR: ${prUrl}`
              : `ℹ️ Agent finished 'apply' but no PR URL was emitted. Check logs.`;
            await github.rest.issues.createComment({ ...context.repo, issue_number, body: msg });

      - name: No-op note when no command
        if: ${{ steps.detect.outputs.command == '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue?.number
              ?? Number(context.payload.comment?.issue_url.split('/').pop());
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number,
              body: "No agent command found. Comment with:\n\n- `/agent plan ...`\n- `/agent revise ...`\n- `/agent apply ...`"
            })
