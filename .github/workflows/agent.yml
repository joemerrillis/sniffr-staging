name: Agent

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  agent:
    if: >
      (github.event_name == 'issues' && startsWith(github.event.issue.body, '/agent ')) ||
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/agent '))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Parse command and prompt
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .github/.agent
          if [ "${{ github.event_name }}" = "issues" ]; then
            RAW="${{ github.event.issue.body }}"
          else
            RAW="${{ github.event.comment.body }}"
          fi

          # Detect /agent plan|apply
          case "$RAW" in
            (/agent\ +plan*)
              CMD="plan"
              REM="${RAW#*/agent plan}"
              ;;
            (/agent\ +apply*)
              CMD="apply"
              REM="${RAW#*/agent apply}"
              ;;
            (*)
              echo "No /agent plan|apply prefix found" >&2
              exit 1
              ;;
          esac

          # Trim leading whitespace/newlines
          printf '%s' "$REM" | sed '1,1 s/^[[:space:]]*//' > .github/.agent/request.md

          echo "cmd=$CMD" >> "$GITHUB_OUTPUT"
          BYTES=$(wc -c < .github/.agent/request.md | tr -d '[:space:]')
          echo "Prompt bytes: $BYTES"
          echo "Command: $CMD"

      - name: Show context sizes (optional)
        shell: bash
        run: |
          for f in \
            docs/CONTEXT.md CONTEXT.md docs/SCHEMA.md schema.md.txt \
            sniffr_plugin_gotchas.md sniffr_plugin_gotchas.md.txt
          do
            if [ -f "$f" ]; then
              B=$(wc -c < "$f" | tr -d '[:space:]')
              echo "::notice title=Context::${f} (${B} bytes)"
            fi
          done

      # ===================== PLAN =====================
      - name: Run agent PLAN (persist plan.md)
        if: steps.parse.outputs.cmd == 'plan'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          node .github/agent/plan-and-commit.mjs \
            --prompt-file .github/.agent/request.md \
            --planOnly

          # Sanity check
          if [ ! -f .github/.agent/plan.md ]; then
            echo "PLAN file missing at .github/.agent/plan.md" >&2
            exit 1
          fi

          # Short preview for comment
          head -c 8000 .github/.agent/plan.md > .github/.agent/plan.preview.md || true

      - name: Comment plan preview on issue
        if: steps.parse.outputs.cmd == 'plan'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const exists = fs.existsSync('.github/.agent/plan.preview.md');
            const body = exists ? fs.readFileSync('.github/.agent/plan.preview.md','utf8') : '';
            const head = body.replace(/\s+/g,' ').slice(0, 300);
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: [
                '**Agent PLAN (preview)**',
                '',
                head + (body.length > 300 ? 'â€¦' : ''),
                '',
                '_Full plan attached as artifact:_ **agent-plan.md**'
              ].join('\n')
            });

      - name: Upload plan artifact
        if: steps.parse.outputs.cmd == 'plan'
        uses: actions/upload-artifact@v4
        with:
          name: agent-plan.md
          path: .github/.agent/plan.md
          include-hidden-files: true
          if-no-files-found: error

      # ===================== APPLY =====================
      - name: Run agent APPLY (writes files & opens PR)
        if: steps.parse.outputs.cmd == 'apply'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN:    ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Your script handles writing files, creating a branch, committing, and opening a PR.
          node .github/agent/plan-and-commit.mjs \
            --prompt-file .github/.agent/request.md \
            --applyOnly

          # Keep latest apply JSON (for debugging/artifacts)
          if ls .github/.agent/apply-*.json >/dev/null 2>&1; then
            LATEST=$(ls -t .github/.agent/apply-*.json | head -n 1)
            echo "latest_apply=$LATEST" >> "$GITHUB_OUTPUT"
          else
            echo "No apply JSON found; proceed (script may have opened PR already)."
          fi
        id: applyrun

      - name: Upload APPLY JSON (artifact)
        if: steps.parse.outputs.cmd == 'apply' && steps.applyrun.outputs.latest_apply
        uses: actions/upload-artifact@v4
        with:
          name: agent-apply.json
          path: ${{ steps.applyrun.outputs.latest_apply }}
          include-hidden-files: true
          if-no-files-found: warn
