name: Agent

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  agent:
    if: >
      (github.event_name == 'issues' && startsWith(github.event.issue.body, '/agent ')) ||
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/agent '))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Parse command and prompt
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .github/.agent
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            RAW="${{ github.event.issue.body }}"
          else
            RAW="${{ github.event.comment.body }}"
          fi

          # Detect /agent plan|apply at start of text
          if [[ "$RAW" =~ ^/agent[[:space:]]+plan ]]; then
            CMD="plan"
            REM="${RAW#*/agent plan}"
          elif [[ "$RAW" =~ ^/agent[[:space:]]+apply ]]; then
            CMD="apply"
            REM="${RAW#*/agent apply}"
          else
            echo "❌ No /agent plan|apply prefix found"; exit 1
          fi

          # Trim leading whitespace/newlines from remainder
          TEXT="$(printf '%s' "$REM" | sed '1,1 s/^[[:space:]]*//')"

          echo "cmd=$CMD" >> "$GITHUB_OUTPUT"
          printf '%s' "$TEXT" > .github/.agent/request.md

          echo "Command: $CMD"
          echo "Prompt bytes: $(wc -c < .github/.agent/request.md)"

      - name: Show harvested canon context sizes (optional)
        shell: bash
        run: |
          for f in "docs/CONTEXT.md" "CONTEXT.md" "docs/SCHEMA.md" "schema.md.txt" "sniffr_plugin_gotchas.md" "sniffr_plugin_gotchas.md.txt"; do
            [[ -f "$f" ]] && echo "::notice title=Context::$(printf "%s (%s bytes)" "$f" "$(wc -c < "$f")")"
          done

      # ===== PLAN MODE =====
      - name: Run agent PLAN
        if: steps.parse.outputs.cmd == 'plan'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          node .github/agent/plan-and-commit.mjs --prompt-file .github/.agent/request.md --planOnly
          test -f .github/.agent/plan.md || { echo "PLAN missing"; exit 1; }
          # Short preview for comment
          head -c 8000 .github/.agent/plan.md > .github/.agent/plan.preview.md || true

      - name: Comment plan preview on issue
        if: steps.parse.outputs.cmd == 'plan'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('.github/.agent/plan.preview.md','utf8');
            const head = body.replace(/\s+/g,' ').slice(0, 300);
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: [
                '**Agent PLAN (preview)**',
                '',
                head + (body.length > 300 ? '…' : ''),
                '',
                '_Full plan attached as artifact:_ **agent-plan.md**'
              ].join('\n')
            });

      - name: Upload plan artifact
        if: steps.parse.outputs.cmd == 'plan'
        uses: actions/upload-artifact@v4
        with:
          name: agent-plan.md
          path: .github/.agent/plan.md
          if-no-files-found: error

      # ===== APPLY MODE =====
      - name: Run agent APPLY (write files only)
        if: steps.parse.outputs.cmd == 'apply'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          node .github/agent/plan-and-commit.mjs --prompt-file .github/.agent/request.md --applyOnly
          # Grab the latest apply json for metadata
          LATEST=$(ls -t .github/.agent/apply-*.json | head -n1)
          echo "latest_apply=$LATEST" >> "$GITHUB_OUTPUT"
        id: applyrun

      - name: Extract apply metadata
        if: steps.parse.outputs.cmd == 'apply'
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          LATEST="${{ steps.applyrun.outputs.latest_apply }}"
          test -f "$LATEST" || { echo "No APPLY JSON found"; exit 1; }
          COMMIT_MSG="$(jq -r '.commitMessage // "chore: agent apply"' "$LATEST")"
          SUMMARY="$(jq -r '.summary // ""' "$LATEST")"
          echo "commit_msg<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create branch, commit, and push
        if: steps.parse.outputs.cmd == 'apply'
        shell: bash
        run: |
          set -euo pipefail
          BR="agent/apply-${{ github.run_id }}"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BR"

          # Only commit if there are changes
          if [[ -z "$(git status --porcelain)" ]]; then
            echo "No changes produced by agent APPLY; exiting early."
            exit 0
          fi

          git add -A
          git commit -m "${{ steps.meta.outputs.commit_msg }}"
          git push --set-upstream origin "$BR"

      - name: Open Pull Request
        if: steps.parse.outputs.cmd == 'apply'
        uses: actions/github-script@v7
        with:
          script: |
            const title = core.getInput('title') || process.env.PR_TITLE || `${{ toJson(steps.meta.outputs.commit_msg) }}`;
            const body  = `${{ toJson(steps.meta.outputs.summary) }}\n\n_Auto-generated by **agent** from issue #${{ github.event.issue.number }}._`;
            try {
              const { data: pr } = await github.rest.pulls.create({
                ...context.repo,
                title,
                body,
                head: 'agent/apply-${{ github.run_id }}',
                base: 'main'
              });
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `Opened PR #${pr.number}: ${pr.title}`
              });
            } catch (e) {
              core.setFailed(`Failed to open PR: ${e.message}`);
            }

      - name: Upload APPLY JSON (artifact)
        if: steps.parse.outputs.cmd == 'apply'
        uses: actions/upload-artifact@v4
        with:
          name: agent-apply.json
          path: ${{ steps.applyrun.outputs.latest_apply }}
          if-no-files-found: error
