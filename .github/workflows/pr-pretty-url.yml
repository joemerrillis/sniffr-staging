name: PR Pretty URL (Render + Cloudflare)

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: read

jobs:
  map-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Setup jq & curl
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Derive names
        id: names
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "pr=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "sub=pr-${PR_NUMBER}.stage" >> $GITHUB_OUTPUT
          echo "root=sniffrpack.com" >> $GITHUB_OUTPUT
          echo "fqdn=pr-${PR_NUMBER}.stage.sniffrpack.com" >> $GITHUB_OUTPUT

      - name: If PR closed, delete DNS and exit
        if: github.event.action == 'closed'
        env:
          CF_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          FQDN: ${{ steps.names.outputs.fqdn }}
        run: |
          set -e
          rec_id=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE/dns_records?type=CNAME&name=$FQDN" \
            -H "Authorization: Bearer $CF_TOKEN" -H "Content-Type: application/json" | jq -r '.result[0].id')
          if [ "$rec_id" != "null" ] && [ -n "$rec_id" ]; then
            curl -s -X DELETE "https://api.cloudflare.com/client/v4/zones/$ZONE/dns_records/$rec_id" \
              -H "Authorization: Bearer $CF_TOKEN" -H "Content-Type: application/json" >/dev/null
            echo "Deleted $FQDN"
          else
            echo "No record to delete for $FQDN"
          fi
          exit 0

      - name: Wait for Render preview (up to ~5 min)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          PR: ${{ steps.names.outputs.pr }}
        run: |
          set -e
          for i in $(seq 1 30); do
            # List latest preview deploys for this service
            resp=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
              "https://api.render.com/v1/services/$SERVICE_ID/deploys?limit=50")
            # Find deploy created for this PR number (Render includes PR number in commit message/metadata)
            host=$(echo "$resp" | jq -r \
              --arg PR "$PR" \
              '.[] | select(.preview==true) | select((.commit.message // "") | test("PR[ #]?"+$PR)) | .url' | head -n1)
            if [ -n "$host" ] && [ "$host" != "null" ]; then
              echo "host=$host" >> $GITHUB_OUTPUT
              break
            fi
            echo "Waiting for Render previewâ€¦ ($i/30)"
            sleep 10
          done
          if [ -z "$(grep '^host=' $GITHUB_OUTPUT)" ]; then
            echo "Could not find preview host yet. Failing."
            exit 1
          fi

      - name: Create/Update Cloudflare CNAME
        env:
          CF_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          FQDN: ${{ steps.names.outputs.fqdn }}
          TARGET: ${{ steps.map-preview.outputs.host }}
        run: |
          set -e
          existing=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE/dns_records?type=CNAME&name=$FQDN" \
            -H "Authorization: Bearer $CF_TOKEN" -H "Content-Type: application/json" | jq -r '.result[0].id')
          data=$(jq -n --arg type CNAME --arg name "$FQDN" --arg content "$TARGET" --argjson proxied true \
                   '{type:$type,name:$name,content:$content,ttl:1,proxied:$proxied}')
          if [ "$existing" != "null" ] && [ -n "$existing" ]; then
            curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE/dns_records/$existing" \
              -H "Authorization: Bearer $CF_TOKEN" -H "Content-Type: application/json" \
              --data "$data" >/dev/null
            echo "Updated $FQDN -> $TARGET"
          else
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE/dns_records" \
              -H "Authorization: Bearer $CF_TOKEN" -H "Content-Type: application/json" \
              --data "$data" >/dev/null
            echo "Created $FQDN -> $TARGET"
          fi

      - name: Comment URL on PR
        uses: actions/github-script@v7
        env:
          FQDN: ${{ steps.names.outputs.fqdn }}
        with:
          script: |
            const body = `ðŸ”— Preview: https://${process.env.FQDN}`;
            await github.rest.issues.createComment({ ...context.repo, issue_number: context.issue.number, body });
