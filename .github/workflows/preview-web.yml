name: Preview (Web)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  upsert:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Render PR preview URL (web)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_WEB_SERVICE_ID }}
          BRANCH: ${{ github.head_ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          WAIT_SECS: 600
        run: |
          node ./scripts/render-get-preview-url.mjs > web_url.txt
          echo "WEB_RENDER_URL=$(cat web_url.txt)" >> $GITHUB_ENV
        continue-on-error: true

      - name: Get Render PR preview URL (api)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_API_SERVICE_ID }}
          BRANCH: ${{ github.head_ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          WAIT_SECS: 600
        run: |
          node ./scripts/render-get-preview-url.mjs > api_url.txt
          echo "API_RENDER_URL=$(cat api_url.txt)" >> $GITHUB_ENV
        continue-on-error: true

      - name: Upsert pretty URL (available origins only)
        env:
          PR_NUM: ${{ github.event.pull_request.number }}
          WORKER_WEBHOOK: ${{ secrets.PREVIEW_WORKER_URL }}   # e.g. https://render-pr-alias.joemerrillis.workers.dev
          WORKER_SECRET: ${{ secrets.PREVIEW_WORKER_SECRET }}
          API_PREFIXES: '["/api","/rapi-doc","/docs"]'
        run: |
          web=$(cat web_url.txt 2>/dev/null || true)
          api=$(cat api_url.txt 2>/dev/null || true)
          if [ -z "$web" ] && [ -z "$api" ]; then
            echo "No Render preview URLs found"; exit 1; fi
          payload=$(jq -n \
            --arg pr  "${PR_NUM}" \
            --arg api "$api" \
            --arg web "$web" \
            --argjson prefixes "${API_PREFIXES}" '
            {action:"upsert", pr: ($pr|tonumber)}
            + ( ($api|length)>0 ? {api:$api} : {} )
            + ( ($web|length)>0 ? {web:$web} : {} )
            + { apiPrefixes: $prefixes }')
          echo "::group::Upsert payload"; echo "$payload"; echo "::endgroup::"
          curl -fsSL -X POST "$WORKER_WEBHOOK/_control" \
            -H "x-webhook-secret: $WORKER_SECRET" \
            -H 'content-type: application/json' \
            --data "$payload"

  cleanup:
    if: github.event.action == 'closed' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Delete mapping on close
        env:
          PR_NUM: ${{ github.event.pull_request.number }}
          WORKER_WEBHOOK: ${{ secrets.PREVIEW_WORKER_URL }}
          WORKER_SECRET: ${{ secrets.PREVIEW_WORKER_SECRET }}
        run: |
          curl -fsSL -X POST "$WORKER_WEBHOOK/_control" \
            -H "x-webhook-secret: $WORKER_SECRET" \
            -H 'content-type: application/json' \
            --data "{\"action\":\"delete\",\"pr\":$PR_NUM}"
